/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface GameInterface extends ethers.utils.Interface {
  functions: {
    "betAmount()": FunctionFragment;
    "finished()": FunctionFragment;
    "minAmount()": FunctionFragment;
    "play(address)": FunctionFragment;
    "player1()": FunctionFragment;
    "player2()": FunctionFragment;
    "start(address)": FunctionFragment;
    "winner()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "betAmount", values?: undefined): string;
  encodeFunctionData(functionFragment: "finished", values?: undefined): string;
  encodeFunctionData(functionFragment: "minAmount", values?: undefined): string;
  encodeFunctionData(functionFragment: "play", values: [string]): string;
  encodeFunctionData(functionFragment: "player1", values?: undefined): string;
  encodeFunctionData(functionFragment: "player2", values?: undefined): string;
  encodeFunctionData(functionFragment: "start", values: [string]): string;
  encodeFunctionData(functionFragment: "winner", values?: undefined): string;

  decodeFunctionResult(functionFragment: "betAmount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "finished", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "minAmount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "play", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "player1", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "player2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "start", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "winner", data: BytesLike): Result;

  events: {
    "gameFinished(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "gameFinished"): EventFragment;
}

export class Game extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: GameInterface;

  functions: {
    betAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "betAmount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    finished(overrides?: CallOverrides): Promise<[boolean]>;

    "finished()"(overrides?: CallOverrides): Promise<[boolean]>;

    minAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "minAmount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    play(
      gambler: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "play(address)"(
      gambler: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    player1(overrides?: CallOverrides): Promise<[string]>;

    "player1()"(overrides?: CallOverrides): Promise<[string]>;

    player2(overrides?: CallOverrides): Promise<[string]>;

    "player2()"(overrides?: CallOverrides): Promise<[string]>;

    start(
      gambler: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "start(address)"(
      gambler: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    winner(overrides?: CallOverrides): Promise<[string]>;

    "winner()"(overrides?: CallOverrides): Promise<[string]>;
  };

  betAmount(overrides?: CallOverrides): Promise<BigNumber>;

  "betAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

  finished(overrides?: CallOverrides): Promise<boolean>;

  "finished()"(overrides?: CallOverrides): Promise<boolean>;

  minAmount(overrides?: CallOverrides): Promise<BigNumber>;

  "minAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

  play(
    gambler: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "play(address)"(
    gambler: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  player1(overrides?: CallOverrides): Promise<string>;

  "player1()"(overrides?: CallOverrides): Promise<string>;

  player2(overrides?: CallOverrides): Promise<string>;

  "player2()"(overrides?: CallOverrides): Promise<string>;

  start(
    gambler: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "start(address)"(
    gambler: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  winner(overrides?: CallOverrides): Promise<string>;

  "winner()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    betAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "betAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    finished(overrides?: CallOverrides): Promise<boolean>;

    "finished()"(overrides?: CallOverrides): Promise<boolean>;

    minAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "minAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    play(gambler: string, overrides?: CallOverrides): Promise<void>;

    "play(address)"(gambler: string, overrides?: CallOverrides): Promise<void>;

    player1(overrides?: CallOverrides): Promise<string>;

    "player1()"(overrides?: CallOverrides): Promise<string>;

    player2(overrides?: CallOverrides): Promise<string>;

    "player2()"(overrides?: CallOverrides): Promise<string>;

    start(gambler: string, overrides?: CallOverrides): Promise<void>;

    "start(address)"(gambler: string, overrides?: CallOverrides): Promise<void>;

    winner(overrides?: CallOverrides): Promise<string>;

    "winner()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    gameFinished(winner: null): TypedEventFilter<[string], { winner: string }>;
  };

  estimateGas: {
    betAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "betAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    finished(overrides?: CallOverrides): Promise<BigNumber>;

    "finished()"(overrides?: CallOverrides): Promise<BigNumber>;

    minAmount(overrides?: CallOverrides): Promise<BigNumber>;

    "minAmount()"(overrides?: CallOverrides): Promise<BigNumber>;

    play(
      gambler: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "play(address)"(
      gambler: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    player1(overrides?: CallOverrides): Promise<BigNumber>;

    "player1()"(overrides?: CallOverrides): Promise<BigNumber>;

    player2(overrides?: CallOverrides): Promise<BigNumber>;

    "player2()"(overrides?: CallOverrides): Promise<BigNumber>;

    start(
      gambler: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "start(address)"(
      gambler: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    winner(overrides?: CallOverrides): Promise<BigNumber>;

    "winner()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    betAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "betAmount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    finished(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "finished()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "minAmount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    play(
      gambler: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "play(address)"(
      gambler: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    player1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "player1()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    player2(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "player2()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    start(
      gambler: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "start(address)"(
      gambler: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    winner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "winner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
