/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface CasinoInterface extends ethers.utils.Interface {
  functions: {
    "createGame(address)": FunctionFragment;
    "gamblers(address)": FunctionFragment;
    "gamblersRegistered(uint256)": FunctionFragment;
    "games(uint256)": FunctionFragment;
    "getGambler(address)": FunctionFragment;
    "getGamblers()": FunctionFragment;
    "getGameCount()": FunctionFragment;
    "getGames()": FunctionFragment;
    "registerGambler(string)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "createGame", values: [string]): string;
  encodeFunctionData(functionFragment: "gamblers", values: [string]): string;
  encodeFunctionData(
    functionFragment: "gamblersRegistered",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "games", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "getGambler", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getGamblers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGameCount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getGames", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerGambler",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "createGame", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gamblers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "gamblersRegistered",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "games", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getGambler", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getGamblers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGameCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getGames", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerGambler",
    data: BytesLike
  ): Result;

  events: {
    "gamblerRegistered(address)": EventFragment;
    "newGame(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "gamblerRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "newGame"): EventFragment;
}

export class Casino extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: CasinoInterface;

  functions: {
    createGame(
      gambler: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "createGame(address)"(
      gambler: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    gamblers(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    "gamblers(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    gamblersRegistered(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "gamblersRegistered(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    games(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    "games(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getGambler(
      gamblerAddress: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "getGambler(address)"(
      gamblerAddress: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getGamblers(overrides?: CallOverrides): Promise<[string[]]>;

    "getGamblers()"(overrides?: CallOverrides): Promise<[string[]]>;

    getGameCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    "getGameCount()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getGames(overrides?: CallOverrides): Promise<[string[]]>;

    "getGames()"(overrides?: CallOverrides): Promise<[string[]]>;

    registerGambler(
      name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "registerGambler(string)"(
      name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  createGame(
    gambler: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "createGame(address)"(
    gambler: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  gamblers(arg0: string, overrides?: CallOverrides): Promise<string>;

  "gamblers(address)"(arg0: string, overrides?: CallOverrides): Promise<string>;

  gamblersRegistered(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "gamblersRegistered(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  games(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "games(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getGambler(
    gamblerAddress: string,
    overrides?: CallOverrides
  ): Promise<string>;

  "getGambler(address)"(
    gamblerAddress: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getGamblers(overrides?: CallOverrides): Promise<string[]>;

  "getGamblers()"(overrides?: CallOverrides): Promise<string[]>;

  getGameCount(overrides?: CallOverrides): Promise<BigNumber>;

  "getGameCount()"(overrides?: CallOverrides): Promise<BigNumber>;

  getGames(overrides?: CallOverrides): Promise<string[]>;

  "getGames()"(overrides?: CallOverrides): Promise<string[]>;

  registerGambler(
    name: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "registerGambler(string)"(
    name: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    createGame(gambler: string, overrides?: CallOverrides): Promise<void>;

    "createGame(address)"(
      gambler: string,
      overrides?: CallOverrides
    ): Promise<void>;

    gamblers(arg0: string, overrides?: CallOverrides): Promise<string>;

    "gamblers(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<string>;

    gamblersRegistered(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "gamblersRegistered(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    games(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "games(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getGambler(
      gamblerAddress: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "getGambler(address)"(
      gamblerAddress: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getGamblers(overrides?: CallOverrides): Promise<string[]>;

    "getGamblers()"(overrides?: CallOverrides): Promise<string[]>;

    getGameCount(overrides?: CallOverrides): Promise<BigNumber>;

    "getGameCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    getGames(overrides?: CallOverrides): Promise<string[]>;

    "getGames()"(overrides?: CallOverrides): Promise<string[]>;

    registerGambler(name: string, overrides?: CallOverrides): Promise<void>;

    "registerGambler(string)"(
      name: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    gamblerRegistered(
      gambler: null
    ): TypedEventFilter<[string], { gambler: string }>;

    newGame(game: null): TypedEventFilter<[string], { game: string }>;
  };

  estimateGas: {
    createGame(
      gambler: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "createGame(address)"(
      gambler: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    gamblers(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "gamblers(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gamblersRegistered(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "gamblersRegistered(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    games(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "games(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGambler(
      gamblerAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getGambler(address)"(
      gamblerAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGamblers(overrides?: CallOverrides): Promise<BigNumber>;

    "getGamblers()"(overrides?: CallOverrides): Promise<BigNumber>;

    getGameCount(overrides?: CallOverrides): Promise<BigNumber>;

    "getGameCount()"(overrides?: CallOverrides): Promise<BigNumber>;

    getGames(overrides?: CallOverrides): Promise<BigNumber>;

    "getGames()"(overrides?: CallOverrides): Promise<BigNumber>;

    registerGambler(
      name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "registerGambler(string)"(
      name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createGame(
      gambler: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "createGame(address)"(
      gambler: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    gamblers(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "gamblers(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gamblersRegistered(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "gamblersRegistered(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    games(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "games(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGambler(
      gamblerAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getGambler(address)"(
      gamblerAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGamblers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getGamblers()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getGameCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getGameCount()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getGames(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getGames()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerGambler(
      name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "registerGambler(string)"(
      name: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
