/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface GamblerInterface extends ethers.utils.Interface {
  functions: {
    "addr()": FunctionFragment;
    "amountWon()": FunctionFragment;
    "gamblerGames(uint256)": FunctionFragment;
    "gamesWon(uint256)": FunctionFragment;
    "getGames()": FunctionFragment;
    "getGamesWon()": FunctionFragment;
    "name()": FunctionFragment;
    "numGamesWon()": FunctionFragment;
    "receivePrize(address)": FunctionFragment;
    "registerGame(address)": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "addr", values?: undefined): string;
  encodeFunctionData(functionFragment: "amountWon", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "gamblerGames",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "gamesWon",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getGames", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getGamesWon",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "numGamesWon",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "receivePrize",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "registerGame",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(functionFragment: "addr", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "amountWon", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "gamblerGames",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gamesWon", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getGames", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getGamesWon",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "numGamesWon",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receivePrize",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerGame",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {};
}

export class Gambler extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: GamblerInterface;

  functions: {
    addr(overrides?: CallOverrides): Promise<[string]>;

    "addr()"(overrides?: CallOverrides): Promise<[string]>;

    amountWon(overrides?: CallOverrides): Promise<[BigNumber]>;

    "amountWon()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    gamblerGames(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "gamblerGames(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    gamesWon(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    "gamesWon(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getGames(overrides?: CallOverrides): Promise<[string[]]>;

    "getGames()"(overrides?: CallOverrides): Promise<[string[]]>;

    getGamesWon(overrides?: CallOverrides): Promise<[string[]]>;

    "getGamesWon()"(overrides?: CallOverrides): Promise<[string[]]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    "name()"(overrides?: CallOverrides): Promise<[string]>;

    numGamesWon(overrides?: CallOverrides): Promise<[BigNumber]>;

    "numGamesWon()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    receivePrize(
      gameWon: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "receivePrize(address)"(
      gameWon: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registerGame(
      game: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "registerGame(address)"(
      game: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdraw()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addr(overrides?: CallOverrides): Promise<string>;

  "addr()"(overrides?: CallOverrides): Promise<string>;

  amountWon(overrides?: CallOverrides): Promise<BigNumber>;

  "amountWon()"(overrides?: CallOverrides): Promise<BigNumber>;

  gamblerGames(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "gamblerGames(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  gamesWon(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  "gamesWon(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getGames(overrides?: CallOverrides): Promise<string[]>;

  "getGames()"(overrides?: CallOverrides): Promise<string[]>;

  getGamesWon(overrides?: CallOverrides): Promise<string[]>;

  "getGamesWon()"(overrides?: CallOverrides): Promise<string[]>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  numGamesWon(overrides?: CallOverrides): Promise<BigNumber>;

  "numGamesWon()"(overrides?: CallOverrides): Promise<BigNumber>;

  receivePrize(
    gameWon: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "receivePrize(address)"(
    gameWon: string,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registerGame(
    game: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "registerGame(address)"(
    game: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdraw()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addr(overrides?: CallOverrides): Promise<string>;

    "addr()"(overrides?: CallOverrides): Promise<string>;

    amountWon(overrides?: CallOverrides): Promise<BigNumber>;

    "amountWon()"(overrides?: CallOverrides): Promise<BigNumber>;

    gamblerGames(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "gamblerGames(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    gamesWon(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    "gamesWon(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getGames(overrides?: CallOverrides): Promise<string[]>;

    "getGames()"(overrides?: CallOverrides): Promise<string[]>;

    getGamesWon(overrides?: CallOverrides): Promise<string[]>;

    "getGamesWon()"(overrides?: CallOverrides): Promise<string[]>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    numGamesWon(overrides?: CallOverrides): Promise<BigNumber>;

    "numGamesWon()"(overrides?: CallOverrides): Promise<BigNumber>;

    receivePrize(gameWon: string, overrides?: CallOverrides): Promise<void>;

    "receivePrize(address)"(
      gameWon: string,
      overrides?: CallOverrides
    ): Promise<void>;

    registerGame(game: string, overrides?: CallOverrides): Promise<void>;

    "registerGame(address)"(
      game: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(overrides?: CallOverrides): Promise<void>;

    "withdraw()"(overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    addr(overrides?: CallOverrides): Promise<BigNumber>;

    "addr()"(overrides?: CallOverrides): Promise<BigNumber>;

    amountWon(overrides?: CallOverrides): Promise<BigNumber>;

    "amountWon()"(overrides?: CallOverrides): Promise<BigNumber>;

    gamblerGames(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "gamblerGames(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gamesWon(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "gamesWon(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGames(overrides?: CallOverrides): Promise<BigNumber>;

    "getGames()"(overrides?: CallOverrides): Promise<BigNumber>;

    getGamesWon(overrides?: CallOverrides): Promise<BigNumber>;

    "getGamesWon()"(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    numGamesWon(overrides?: CallOverrides): Promise<BigNumber>;

    "numGamesWon()"(overrides?: CallOverrides): Promise<BigNumber>;

    receivePrize(
      gameWon: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "receivePrize(address)"(
      gameWon: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registerGame(
      game: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "registerGame(address)"(
      game: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdraw()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "addr()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    amountWon(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "amountWon()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gamblerGames(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "gamblerGames(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gamesWon(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "gamesWon(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGames(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getGames()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getGamesWon(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getGamesWon()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numGamesWon(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "numGamesWon()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    receivePrize(
      gameWon: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "receivePrize(address)"(
      gameWon: string,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registerGame(
      game: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "registerGame(address)"(
      game: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdraw()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
